generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id        String   @id
  name      String   @unique
  isActive  Boolean  @default(true)
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model CustomItem {
  id          String   @id
  name        String
  category    String
  units       Json
  defaultUnit String
  isActive    Boolean  @default(true)
  isHidden    Boolean  @default(false)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  createdBy   String
  user        User     @relation(fields: [createdBy], references: [id])

  @@unique([name, category])
}

model Disbursement {
  id                String             @id
  recipientPhone    String?
  createdAt         DateTime           @default(now())
  userId            String
  serialNumber      String             @unique @default("")
  recipientAddress  String?
  recipientUnitId   String?
  recipientUnitName String
  recipientUnit     RecipientUnit?     @relation(fields: [recipientUnitId], references: [id])
  user              User               @relation(fields: [userId], references: [id])
  disbursementItems DisbursementItem[]
}

model DisbursementItem {
  id             String          @id
  disbursementId String
  itemCategory   String
  itemName       String
  itemUnit       String
  quantity       Int             @default(1)
  disbursement   Disbursement    @relation(fields: [disbursementId], references: [id])
  itemConditions ItemCondition[]
}

model DonationItem {
  id             String          @id
  donationId     String
  quantity       Int             @default(1)
  expiryDate     DateTime?
  isStandard     Boolean         @default(false)
  itemCategory   String
  itemName       String
  itemUnit       String
  notes          String?
  isHandled      Boolean         @default(false)
  donation       DonationRecord  @relation(fields: [donationId], references: [id])
  itemConditions ItemCondition[]
}

model DonationRecord {
  id           String         @id
  createdAt    DateTime       @default(now())
  userId       String
  donorId      String?
  serialNumber String         @unique @default("")
  donationItems DonationItem[]
  donor         Donor?         @relation(fields: [donorId], references: [id])
  user          User           @relation(fields: [userId], references: [id])
}

model Donor {
  id             String           @id
  name           String           @unique
  phone          String?
  taxId          String?
  address        String?
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  donationRecords DonationRecord[]
}

model InventoryChangeReason {
  id         String     @id
  reason     String
  changeType ChangeType
  isActive   Boolean    @default(true)
  sortOrder  Int        @default(0)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime
}

model InventoryLog {
  id               String     @id
  itemStockId      String
  changeType       ChangeType
  changeAmount     Int
  newQuantity      Int
  reason           String
  createdAt        DateTime   @default(now())
  userId           String
  previousQuantity Int
  itemStock        ItemStock  @relation(fields: [itemStockId], references: [id])
  user             User       @relation(fields: [userId], references: [id])
}

model ItemCondition {
  id                 String            @id
  condition          String
  quantity           Int
  notes              String?
  createdAt          DateTime          @default(now())
  donationItemId     String?
  disbursementItemId String?
  disbursementItem   DisbursementItem? @relation(fields: [disbursementItemId], references: [id])
  donationItem       DonationItem?     @relation(fields: [donationItemId], references: [id])
}

model ItemStock {
  id           String         @id
  itemName     String
  itemCategory String
  itemUnit     String
  totalStock   Int
  safetyStock  Int            @default(0)
  isStandard   Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  inventoryLogs InventoryLog[]

  @@unique([itemName, itemCategory])
}

model ReceiptSeal {
  id        String   @id
  imageData String
  mimeType  String   @default("image/png")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime
  userId    String   @unique
  nickname  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RecipientUnit {
  id            String         @id
  name          String         @unique
  contactPerson String?
  phone         String?
  address       String?
  serviceCount  Int?
  isActive      Boolean        @default(true)
  sortOrder     Int            @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime
  disbursements Disbursement[]
}

model SerialNumberCounter {
  id        String   @id
  type      String   @unique
  counter   Int      @default(0)
  prefix    String
  updatedAt DateTime
  createdAt DateTime @default(now())
}

model StandardItem {
  id          String  @id
  name        String
  category    String
  units       Json
  defaultUnit String
  isActive    Boolean @default(true)
  sortOrder   Int     @default(0)

  @@unique([name, category])
}

model Supply {
  id          String   @id
  name        String
  category    String
  quantity    Int
  safetyStock Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  unit        String   @default("å€‹")

  @@unique([name, category])
}

model Unit {
  id        String   @id
  name      String   @unique
  isActive  Boolean  @default(true)
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model User {
  id              String           @id
  clerkId         String           @unique
  email           String           @unique
  nickname        String?
  role            Role             @default(VOLUNTEER)
  isFirstLogin    Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime
  lastLoginAt     DateTime?
  customItems     CustomItem[]
  disbursements   Disbursement[]
  donationRecords DonationRecord[]
  inventoryLogs   InventoryLog[]
  seal            ReceiptSeal?
}

enum ChangeType {
  INCREASE
  DECREASE
}

enum Role {
  ADMIN
  STAFF
  VOLUNTEER
}
